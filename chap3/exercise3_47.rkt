#lang sicp

(define (make-mutex)
  (let ((cell (list false)))
    (define (the-mutex m)
      (cond ((eq? m 'acquire)
             (if (test-and-set! cell)
                 (the-mutex 'acquire)))
            ((eq? m 'release) (clear! cell))))
    the-mutex))

(define (clear! cell)
  (set-car! cell false))

(define (test-and-set! cell)
  (if (car cell)
      true
      (begin (set-car! cell true)
             false)))

; A)
(define (make-n-mutex n)
  (let ((mutex (make-mutex))
        (counter n))
    (define (the-n-mutex m)
      (cond ((eq? m 'acquire)
             (begin (mutex 'acquire)
                    (if (> counter 0)
                        (begin (- counter 1)
                               (mutex 'release))
                        (begin (mutex 'release)
                               (the-n-mutex 'acquire)))))
            ((eq? m 'release)
             (begin (mutex 'acquire)
                    (+ counter 1)
                    (mutex 'release)))))
    the-n-mutex))

; B)

(define (make-n-mutex-set n)
  (let ((cell (list false))
        (counter n))
    (define (wait-for-test! cell)
      (if (test-and-set! cell)
          (wait-for-test! cell)))
    (define (the-n-mutex m)
      (cond ((eq? m 'acquire)
             (begin (wait-for-test! cell)
                    (if (> counter 0)
                        (begin (- counter 1)
                               (clear! cell))
                        (begin (clear! cell)
                               (the-n-mutex 'acquire)))))
            ((eq? m 'release)
             (begin (wait-for-test! cell)
                    (+ n 1)
                    (clear! cell)))))
    the-n-mutex))